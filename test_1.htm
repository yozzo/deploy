<!DOCTYPE html>
<!-- saved from url=(0035)http://beginfill.com/WebGL_Video3D/ -->
<html>
<head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
    <title>test webGL</title>
    <style type="text/css">
        * {
            margin: 0;
            padding: 0;
        }
    </style>
    <script type="text/javascript" src="./test webGL_files/glMatrix-0.9.5.min.js"></script>
    <script type="text/javascript" src="./test webGL_files/BitmapData.js"></script>
    <script type="text/javascript" src="./test webGL_files/VideoMc.js"></script>
    <script type="text/javascript" src="./test webGL_files/Texture3D.js"></script>
    <script type="text/javascript" src="./test webGL_files/MouseObj.js"></script>
    <script type="text/javascript" src="./test webGL_files/Camera3D.js"></script>
    <script type="text/javascript" src="./test webGL_files/BlendMode.js"></script>
    <script type="text/javascript" src="./test webGL_files/Render3D.js"></script>
    <script type="text/javascript" src="./test webGL_files/AttributePool.js"></script>
    <script type="text/javascript" src="./test webGL_files/MatrixPool.js"></script>
    <script type="text/javascript" src="./test webGL_files/TexturePool.js"></script>
    <script type="text/javascript" src="./test webGL_files/UniformPool.js"></script>
    <script type="text/javascript" src="./test webGL_files/ShaderGL.js"></script>
    <!-- created by Tom Le Coz -->

    <script id="gridParticle-vertex" type="x-shader/x-vertex">


    uniform float colorSum;
    uniform mat4 mvMatrix;
    uniform mat4 pMatrix;
    uniform vec2 position;
    uniform vec2 dimension;


    const float scale = 1.0;
    const vec2 topXY = vec2(0.0,-1.0);
    const vec2 leftXY = vec2(-1.0,1.0);
    const vec2 rightXY = vec2(1.0,1.0);

    const float maxY = 512.0;
    const float offsetY = 256.0;
    const float ratioY = 32.0/512.0;
    const vec2 topUV = vec2(0.0009765625,0.0);
    const vec2 leftUV = vec2(0.0,0.001953125);
    const vec2 rightUV = vec2(0.001953125,0.001953125);

    //varying vec4 col;
    varying vec2 uvts;

    attribute vec2 vertexBuffer;
    attribute float colorBuffer;

    void main(void) {

        float w2 = dimension.x / 2.0;
        float h2 = dimension.y / 2.0;
        float py = vertexBuffer.x / dimension.x;
        float px = mod(py,1.0);
        py -= px;

        vec2 uv = vec2(px,py);
        uv.y /= dimension.y;

        px *= dimension.x;



        px -= w2;
        py -= h2;



        float a = colorBuffer;
        float dif = -(a - colorSum)/300000.0;
        //dif *= cos(px / w2);

        /*
        a /= 256.0;
        float b = mod(a,1.0);
        a/= 256.0;
        float g = mod(a,1.0);
        a /= 256.0;
        float r = mod(a,1.0);
        a /= 256.0;
        a = mod(a,1.0);
        */


        px += position.x;
        py += position.y;



        vec4 vertexPos =  pMatrix * mvMatrix * vec4(px*scale,py*scale,dif*scale, scale);



        if(vertexBuffer.y == 0.0){
            vertexPos.xy += topXY.xy;
            uv += topUV;
        }
        else if(vertexBuffer.y == 1.0){
            vertexPos.xy += leftXY.xy;
            uv += leftUV;
        }
        else {
            vertexPos.xy += rightXY.xy;
            uv += rightUV;
        }


        gl_Position = vertexPos;

        float dy = position.y;
        dy += offsetY;
        dy /= maxY;

        uv.y *= ratioY;
        uv.y += dy;

        uvts = uv;

        //col = vec4(r,g,b,a*0.9);



    }
</script>

    <script id="gridParticle-fragment" type="x-shader/x-fragment">
    precision mediump float;
    //varying vec4 col;
    varying vec2 uvts;

    uniform sampler2D videoTexture;

    void main(void) {
        vec4 color = texture2D(videoTexture, vec2(uvts.s, uvts.t));

        gl_FragColor = color;
    }
</script>


    <script type="text/javascript">

        var ParticleGrid = function(camera,posx,posy,nbX,nbY){

            this.position = [parseFloat(posx),parseFloat(posy)];
            this.dimension = [parseFloat(nbX) , parseFloat(nbY)];

            if(ParticleGrid.shader == null){

                var shader = new ShaderGL(camera.gl);
                shader.compileShaderFromDocumentElements("gridParticle-vertex","gridParticle-fragment");

                var i,j = 0,len = nbX*nbY;
                var idX,idY;
                var verts = new Array();
                var rgbaColors = new Array();
                var indices = new Array();
                var vertexId = 0;
                var col;
                var k = 0;
                for(i=0;i<len;i++){
                    verts.push(i,0);
                    verts.push(i,1);
                    verts.push(i,2);
                    col = parseFloat(0xffff0000);
                    rgbaColors.push(col,col,col);
                    indices[k] = k++;
                    indices[k] = k++;
                    indices[k] = k++;
                }
                // shader.newTextureFromURL("triangleTexture","triangleTexture.png");
                shader.newTexture("videoTexture");


                shader.newMatrix4x4("mvMatrix",camera.mvMatrix);
                shader.newMatrix4x4("pMatrix",camera.pMatrix);

                shader.newSingleFloat(1,"colorSum",[parseFloat(0x9f9f9f)]);

                shader.newFloatVector(2,"position",this.position);
                shader.newFloatVector(2,"dimension",this.dimension);
                shader.newFloatAttributes(2,"vertexBuffer",verts)
                shader.newFloatAttributes(1,"colorBuffer",rgbaColors)
                shader.setTriangleIndices(indices);
                shader.start();

                ParticleGrid.shader = shader;
                shader.blendMode = BlendMode.USE_ALPHA_CHANNEL;
            }

            this.shader = ParticleGrid.shader;
            this.pixelColors = new Float32Array(this.shader.colorBuffer);
        }

        ParticleGrid.prototype.update = function(){
            this.shader.position = this.position;
            this.shader.dimension = this.dimension;
            this.shader.colorBuffer = this.pixelColors;
            this.shader.apply();
        }
    </script>
    <!-- created by Tom Le Coz -->



    <script id="plane-vertex" type="x-shader/x-vertex">
    attribute vec3 vertexBuffer;
    attribute vec2 uvBuffer;

    uniform float scale;
    uniform mat4 mvMatrix;
    uniform mat4 pMatrix;
    uniform vec2 position;
    uniform vec2 dimension;
    uniform vec2 uvMulti;

    const vec4 col0 = vec4(0.50,0.0,0.0,0.0);
    const vec4 col1 = vec4(0.0,0.0,0.50,0.0);

    varying vec4 testCol;
    varying vec2 uvts;

    void main(void) {
        vec4 vertexPos =  pMatrix * mvMatrix * vec4(vertexBuffer, 1.0);
        vertexPos.x *= dimension.x;
        vertexPos.y *= dimension.y;
        vertexPos.x += position.x;
        vertexPos.y += position.y;

        vertexPos *= scale;

        gl_Position = vertexPos;

        if(uvMulti.x != 1.0){
            testCol = col0;
        }else{
            testCol = col1;
        }

        uvts = uvBuffer;
        uvts.x *= uvMulti.x;
        uvts.y *= uvMulti.y;
    }
</script>


    <script id="plane-fragment" type="x-shader/x-fragment">
    precision mediump float;

    varying vec4 testCol;
    varying vec2 uvts;
    uniform sampler2D texture;

    void main(void) {
        vec4 color = texture2D(texture, vec2(uvts.s, uvts.t));
        color += testCol;
        gl_FragColor = color;
    }
</script>


    <script type="text/javascript">

        var Plane = function(camera,posx,posy,width,height){


            this.position = [parseFloat(posx),parseFloat(posy)];
            this.dimension = [parseFloat(width),parseFloat(height)];
            this.uvMulti = [1.0,1.0];

            if(Plane.shader == null ){


                var shader = new ShaderGL(camera.gl);
                shader.compileShaderFromDocumentElements("plane-vertex","plane-fragment");

                shader.newTexture("texture");
                shader.newFloatVector(1,"scale",[1]);
                shader.newMatrix4x4("mvMatrix",camera.mvMatrix);
                shader.newMatrix4x4("pMatrix",camera.pMatrix);
                shader.newFloatVector(2,"position",this.position);
                shader.newFloatVector(2,"dimension",this.dimension);
                shader.newFloatVector(2,"uvMulti",this.uvMulti);
                //shader.newFloatVector(4,"col0",[0.25,0.0,0.0,0.0]);
                //shader.newFloatVector(4,"col1",[0.0,0.0,0.25,0.0]);

                var th = this;
                shader.texture.onResize = function(){
                    th.uvMulti[0] = shader.texture.uvScale[0] ;
                    th.uvMulti[1] = shader.texture.uvScale[1] ;

                }

                var verts = new Array();
                verts.push(-0.5,-0.5,+0.0);
                verts.push(+0.5,-0.5,+0.0);
                verts.push(-0.5,+0.5,+0.0);
                verts.push(+0.5,+0.5,+0.0);

                var uv = new Array();
                var rx = 1.0;
                var ry = 1.0;
                uv.push(0.0,0.0);
                uv.push(rx ,0.0);
                uv.push(0.0, ry);
                uv.push(rx , ry);

                var indices = new Array();
                indices.push(0,1,2,1,3,2);

                shader.newFloatAttributes(3,"vertexBuffer",verts);
                shader.newFloatAttributes(2,"uvBuffer",uv);
                shader.setTriangleIndices(indices);

                shader.start();

                Plane.shader = shader;
            }


            this.shader = Plane.shader;

        }

        Plane.prototype.update = function(){
            this.shader.position = this.position;
            this.shader.dimension = this.dimension;
            this.shader.uvMulti = this.uvMulti;
            this.shader.apply();
        }


    </script>
    <script type="text/javascript">

        var video;

        function main(){
            var videoSize = this.videoSize = 512 ;
            var render = new Render3D(window.innerWidth,window.innerHeight,60);
            video = new VideoMc(videoSize,videoSize,"videos/test_4.mp4");

            /*var plane = new Plane(render.camera,0,0,300,300);
             plane.shader.texture.initFromBitmapData(video.bmpData);
             render.addChild(plane);
             */


            var py = -videoSize/2;
            var n = 0;
            this.nbElement = videoSize/32;
            this.elements = new Array()
            for(i=0;i<this.nbElement;i++)  this.elements[i] = render.addChild(new ParticleGrid(render.camera,0,-videoSize/2 + i * 32,videoSize,32));
            this.elements[0].shader.videoTexture.initFromBitmapData(video.bmpData);

            setInterval(videoUpdate,Math.round(1000/18));
        }
        function videoUpdate(){

            video.update();

            var i,mc,colorSum = 0,bd = video.bmpData;
            for(i=0;i<this.nbElement;i++) colorSum += bd.getRGBAPixelRect(0,i*32,this.videoSize,32,this.elements[i].pixelColors)
            this.elements[0].shader.colorSum = parseFloat(colorSum/this.nbElement); //applyed on all because they shared the shader
        }


    </script>
</head>
<body onload="main();" margin="0" padding="0">

<meta id="fake_position_meta" name="fake_geolocation_chrome_extension" content="{}"><canvas id="viewport" width="100%" height="100vh"></canvas></body></html>